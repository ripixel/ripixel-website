version: 2.1 # use CircleCI 2.1

executors:
  node-project:
    working_directory: ~/tmp
    docker:
      - image: cimg/node:22.21.0

jobs: # a collection of steps
  install_deps: # install npm deps
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install NPM Dependencies if no cache
          command: |
            [ ! -d "/tmp/node_modules" ] && npm ci
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/tmp/node_modules

  build_dev: # build the project - requires dependencies to have been installed
    executor: node-project
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache:
          key: changelog-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: # run build
          name: Build
          command: npm run build:dev
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: public
      - save_cache: # special step to save the public cache and deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/tmp/public
            - ~/tmp/.firebaserc
            - ~/tmp/firebase.json
            - ~/tmp/package-lock.json

  build_prod_no_version:
    executor: node-project
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Add Git User details
          command: |
            git config --global user.email "ripixel+ci@gmail.com"
            git config --global user.name "CircleCi"
      - run: # run build
          name: Build
          command: npm run build
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: public
      - save_cache: # special step to save the public cache and deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/tmp/public
            - ~/tmp/.firebaserc
            - ~/tmp/firebase.json
            - ~/tmp/package-lock.json

  build_prod_with_version:
    executor: node-project
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Add Git User details
          command: |
            git config --global user.email "ripixel+ci@gmail.com"
            git config --global user.name "CircleCi"
      - run:
          name: Bump version and generate changelog
          command: npm run release:ci
      - run: # run build
          name: Build
          command: npm run build
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: public
      - save_cache: # special step to save the public cache and deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/tmp/public
            - ~/tmp/.firebaserc
            - ~/tmp/firebase.json
            - ~/tmp/package-lock.json

  deploy_to_firebase_prod: # deploy the project to prod - SHOULD ONLY BE RUN ON MASTER BRANCH
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache: # restore the /public folder and associated deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Deploy to Firebase Production Hosting
          command: ./node_modules/.bin/firebase deploy --token "$FIREBASE_TOKEN" --only hosting:production

  deploy_to_firebase_stg: # deploy the project to staging - SHOULD ONLY BE RUN ON STAGING BRANCH
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache: # restore the /public folder and associated deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Deploy to Firebase Staging Hosting
          command: ./node_modules/.bin/firebase deploy --token "$FIREBASE_TOKEN" --only hosting:staging
      - run:
          name: Post Github PR Comment
          command: |
            sudo apt-get install jq

            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
            -u $GH_USER:$GH_TOKEN)

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
            fi

            curl --location --request POST "$pr_comment_url" \
            -u $GH_USER:$GH_TOKEN \
            --header 'Content-Type: application/json' \
            --data-raw '{
            "body": "Successfully deployed to Firebase! Go to https://staging.ripixel.co.uk"
            }'

  deploy_to_firebase_preview: # deploy the project to preview channel - SHOULD ONLY BE RUN ON PR BRANCHES
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - restore_cache: # restore the /public folder and associated deploy files
          key: deploy-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Deploy to Firebase Preview Channel
          command: ./node_modules/.bin/firebase hosting:channel:deploy $CIRCLE_BRANCH --token "$FIREBASE_TOKEN"
      - run:
          name: Post Github PR Comment
          command: |
            sudo apt-get install jq

            channels=$(./node_modules/.bin/firebase hosting:channel:list)
            circle_branch_replaced=$(echo $CIRCLE_BRANCH | sed "s/\//-/")
            regex='(https:\/\/[a-z0-9-]*--'"${circle_branch_replaced:0:39}"'-[a-z0-9-]*.web.app)'
            [[ $channels =~ $regex ]] && url=${BASH_REMATCH[0]}

            if [ $(echo $url | jq length) -eq 0]; then
              url="Unable to get URL - check Firebase console"
            fi

            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
            -u $GH_USER:$GH_TOKEN)

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
            fi

            curl --location --request POST "$pr_comment_url" \
            -u $GH_USER:$GH_TOKEN \
            --header 'Content-Type: application/json' \
            --data-raw '{"body": "Successfully deployed to Firebase preview channel! Available at: '"$url"'"}'

workflows:
  build_and_deploy:
    jobs:
      - install_deps
      - build_dev:
          filters:
            branches:
              ignore: master
          requires:
            - install_deps
      - build_prod_with_version:
          filters:
            branches:
              only: master
          requires:
            - install_deps
      - deploy_to_firebase_prod:
          filters:
            branches:
              only: master
          requires:
            - build_prod_with_version
      - deploy_to_firebase_preview:
          filters:
            branches:
              ignore:
                - master
                - staging
          requires:
            - build_dev
      - deploy_to_firebase_stg:
          filters:
            branches:
              only: staging
          requires:
            - build_dev
  daily:
    triggers:
      - schedule:
          cron: "55 20 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - install_deps
      - build_prod_no_version:
          requires:
            - install_deps
      - deploy_to_firebase_prod:
          requires:
            - build_prod_no_version
# VS Code Extension Version: 1.5.1
